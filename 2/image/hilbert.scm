(load "picture.scm")

(define (hilbert-a p0 q0 p1 q1 i)
  (if (= i 0)
      (let ( (x1 (/ (+ (* 3 p0) p1) 4))
	     (y1 (/ (+ (* 3 q0) q1) 4))
	     (x2 (/ (+ p0 (* 3 p1)) 4))
	     (y2 (/ (+ q0 (* 3 q1)) 4)) )
	   (list (make-vect x2 y2)
		 (make-vect x1 y2)
		 (make-vect x1 y1)
		 (make-vect x2 y1)))
      (let ( (xm (/ (+ p0 p1) 2))
	     (ym (/ (+ q0 q1) 2)) )
	   (append (hilbert-d xm ym p1 q1 (- i 1))
		   (hilbert-a p0 ym xm q1 (- i 1))
		   (hilbert-a p0 q0 xm ym (- i 1))
		   (hilbert-b xm q0 p1 ym (- i 1)) ))
))

(define (hilbert-b p0 q0 p1 q1 i)
  (if (= i 0)
      (let ( (x1 (/ (+ (* 3 p0) p1) 4))
	     (y1 (/ (+ (* 3 q0) q1) 4))
	     (x2 (/ (+ p0 (* 3 p1)) 4))
	     (y2 (/ (+ q0 (* 3 q1)) 4)) )
	   (list (make-vect x1 y1)
		 (make-vect x1 y2)
		 (make-vect x2 y2)
		 (make-vect x2 y1)))
      (let ( (xm (/ (+ p0 p1) 2))
	     (ym (/ (+ q0 q1) 2)) )
	   (append (hilbert-c p0 q0 xm ym (- i 1))
		   (hilbert-b p0 ym xm q1 (- i 1))
		   (hilbert-b xm ym p1 q1 (- i 1))
		   (hilbert-a xm q0 p1 ym (- i 1)) ))
))

(define (hilbert-c p0 q0 p1 q1 i)
  (if (= i 0)
      (let ( (x1 (/ (+ (* 3 p0) p1) 4))
	     (y1 (/ (+ (* 3 q0) q1) 4))
	     (x2 (/ (+ p0 (* 3 p1)) 4))
	     (y2 (/ (+ q0 (* 3 q1)) 4)) )
	   (list (make-vect x1 y1)
		 (make-vect x2 y1)
		 (make-vect x2 y2)
		 (make-vect x1 y2)))
      (let ( (xm (/ (+ p0 p1) 2))
	     (ym (/ (+ q0 q1) 2)) )
	   (append (hilbert-b p0 q0 xm ym (- i 1))
		   (hilbert-c xm q0 p1 ym (- i 1))
		   (hilbert-c xm ym p1 q1 (- i 1))
		   (hilbert-d p0 ym xm q1 (- i 1)) ))
))


(define (hilbert-d p0 q0 p1 q1 i)
  (if (= i 0)
      (let ( (x1 (/ (+ (* 3 p0) p1) 4))
	     (y1 (/ (+ (* 3 q0) q1) 4))
	     (x2 (/ (+ p0 (* 3 p1)) 4))
	     (y2 (/ (+ q0 (* 3 q1)) 4)) )
	   (list (make-vect x2 y2)
		 (make-vect x2 y1)
		 (make-vect x1 y1)
		 (make-vect x1 y2)))
      (let ( (xm (/ (+ p0 p1) 2))
	     (ym (/ (+ q0 q1) 2)) )
	   (append (hilbert-a xm ym p1 q1 (- i 1))
		   (hilbert-d xm q0 p1 ym (- i 1))
		   (hilbert-d p0 q0 xm ym (- i 1))
		   (hilbert-c p0 ym xm q1 (- i 1)) ))
))


(define (hilbert n) 
  (clear-picture)
  (segments->painter
     (vectors->segments
        (hilbert-a 0.0 0.0 1.0 1.0 n) )))

;;実行
(start-picture)

((hilbert 5) frm1)